---
resource_types:
- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-test

resources:
- name: pipeline-scripts
  type: git
  source:
    branch: master
    uri: {{git-project-url}}
- name: file-repository
  type: s3
  source:
    bucket: {{s3-bucket}}
    access_key_id: {{s3-access-key-id}}
    secret_access_key: {{s3-secret-access-key}}
    regexp: {{s3-directory-path}}
    region_name: us-west-1
- name: monthly-trigger
  type: cron-resource
  source:
    location: "America/New_York"
    expression: "0 6 1 * *"
    # trigger on the first day of each month at 6:00am ET

jobs:
- name: retrieve-and-process-pcf-usage-data
  serial: true
  public: true
  plan:
  - do:
    - get: pipeline-scripts
      trigger: false
    # - get: monthly-trigger
    #   trigger: true
    - task: define-report-time-range
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotalservices/pcf-usage-tools
            tag: "latest"
        outputs:
          - name: report-time-range
        run:
          path: sh
          args:
          - -exc
          - |
            #
            # Sample 1: set time range as last month's start and end dates
            #
            date1=$(date --date="-1 month" +"%Y-%m-01")
            date -d "$(date +%Y-%m-01) -1 day" +"{ 'USAGE_START_DATE':'$date1', 'USAGE_END_DATE':'%Y-%m-%d' }" > ./report-time-range/report-time-range.json
            #
            # Sample 2: set time range as current month's start to current date
            #
            # date1=$(date -d "$(date +%Y-%m-01)" +"%Y-%m-01")
            # date -d "$(date +%Y-%m-%d)" +"{ 'USAGE_START_DATE':'$date1', 'USAGE_END_DATE':'%Y-%m-%d' }" > ./report-time-range/report-time-range.json
            #
            sed -i "s/[']/\"/g" ./report-time-range/report-time-range.json
            cat  ./report-time-range/report-time-range.json

    - task: get-usage-data
      file: pipeline-scripts/ci/tasks/get-usage-data.yml
      params:
        PCF_API_ENDPOINT: {{pcf-api-endpoint}}
        PCF_APPS_DOMAIN: {{pcf-apps-domain}}
        SYS_ADMIN_USER: {{pcf-sys-admin-user}}
        SYS_ADMIN_PASSWORD: {{pcf-sys-admin-user-password}}

    - task: consolidate-usage-data
      file: pipeline-scripts/ci/tasks/consolidate-usage-data.yml
      params:
        PCF_DEPLOY_NAME: {{pcf-deploy-name}}

    - put: file-repository
      params:
        file: ./orgs-usage-consolidated/*.json
        acl: public-read

    on_failure:
      task: email-notification-failure
      file: pipeline-scripts/ci/tasks/send-email.yml
      params:
        SMTP_HOST: {{smtp-host}}
        SMTP_PORT: {{smtp-port}}
        SMTP_USERNAME: {{smtp-username}}
        SMTP_PASSWORD: {{smtp-password}}
        EMAIL_FROM: {{email-from}}
        EMAIL_TO: {{email-to}}
        EMAIL_SUBJECT_TEXT: PCF usage report build failure
        EMAIL_BODY_TEXT: Build failure while generating PCF usage report.
        # EMAIL_ATTACHMENTS: '[{ "filename": "email-text-success.txt","path": "./email-text/email-text-success.txt", "contentType":"text/plain"}]'

- name: feed-report-into-billing-system
  serial: true
  public: true
  plan:
  - do:
    - get: pipeline-scripts
      trigger: false
    - get: file-repository
      trigger: true
      passed:
      - retrieve-and-process-pcf-usage-data

    - task: feed-report-data-into-billing-system
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: pivotalservices/pcf-usage-tools
            tag: "latest"
        inputs:
          - name: pipeline-scripts
          - name: file-repository
        run:
          path: sh
          args:
          - -exc
          - |
            #!/bin/bash
            set -e
            echo "This is a place holder for the code to read the report file from the file repository and feed it to a billing system"
            echo "Report file URL:"
            cat ./file-repository/url
            echo "Report file version(timestamp of creation in seconds):"
            cat ./file-repository/version
            echo "File list from the repository:"
            ls -la file-repository

    - task: prep-success-notification-email-text
      file: pipeline-scripts/ci/tasks/prepare-email.yml
      params:
        EMAIL_SUBJECT_TEXT: PCF usage report build complete
        EMAIL_BODY_TEXT: Successfully generated PCF usage report.

    - task: email-notification-success
      file: pipeline-scripts/ci/tasks/send-email.yml
      params:
        SMTP_HOST: {{smtp-host}}
        SMTP_PORT: {{smtp-port}}
        SMTP_USERNAME: {{smtp-username}}
        SMTP_PASSWORD: {{smtp-password}}
        EMAIL_FROM: {{email-from}}
        EMAIL_TO: {{email-to}}
        EMAIL_SUBJECT_FILE: ./email-text/email-subject.txt
        EMAIL_BODY_FILE: ./email-text/email-body.txt
        # EMAIL_ATTACHMENTS: '[{ "filename": "email-text-success.txt","path": "./email-text/email-text-success.txt", "contentType":"text/plain"}]'
    on_failure:
      task: email-notification-failure
      file: pipeline-scripts/ci/tasks/send-email.yml
      params:
        SMTP_HOST: {{smtp-host}}
        SMTP_PORT: {{smtp-port}}
        SMTP_USERNAME: {{smtp-username}}
        SMTP_PASSWORD: {{smtp-password}}
        EMAIL_FROM: {{email-from}}
        EMAIL_TO: {{email-to}}
        EMAIL_SUBJECT_TEXT: PCF usage report build failure
        EMAIL_BODY_TEXT: Build failure while generating PCF usage report.
        # EMAIL_ATTACHMENTS: '[{ "filename": "email-text-success.txt","path": "./email-text/email-text-success.txt", "contentType":"text/plain"}]'
